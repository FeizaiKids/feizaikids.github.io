1. Closure
Example1:
<script type="text/javascript">
            window.onload = function(){
                var output = document.getElementById('Output');
                var closure =  new myClosure2();
                output.innerHTML = closure.foo();
                window.setTimeout(function(){
                    output.innerHTML += '<br />' + closure.foo();
                }, 500);
                
            }
            function myNonClosure(){
                var date = new Date();
                return date.getMilliseconds();
            }
            //Class
            function myClosure(){
                var date = new Date();
                return function(){
                    return date.getMilliseconds();
                }
            }
            //Class
            var myClosure2 = function(){
                var date = new Date();
                var myNestedFunc = function(){
                    return date.getMilliseconds();
                };//private
                return {
                    foo: myNestedFunc
                };
            }
</script>

2. Prototype
Example 1:
#test.js#
var Calculator = function(eq){
    this.eqCtl = document.getElementById(eq);
}

Calculator.prototype = {
    add: function (x, y) {
        var val = x + y;
        this.eqCtl.innerHTML = val;
        
    }
}
#test.html#
var calc = new Calculator('test');
calc.add(2,2);

#Override in test.html#
Calculator.prototype.add = function(x, y){
                var val = x-y;
                this.eqCtl.innerHTML = val;
};
var calc = new Calculator('test');
calc.add(2,2);

#about namespace in test.js#
var myNS = myNS || {};

myNS.Calculator = function(eq){
    this.eqCtl = document.getElementById(eq);
}

myNS.Calculator.prototype = {
    add: function (x, y) {
        var val = x + y;
        this.eqCtl.innerHTML = val;
        
    }
}
#about namespace in test.html#
var calc = new myNS.Calculator('test');
calc.add(2,2);

Example 2:
#calculator.js#
//Constructor defines properties and inits object
var Calculator = function (tb, eq){
    this.eqCtl = document.getElementById(eq);
    this.currNumberCtl = document.getElementById(tb);
    this.operator = null;
    this.operatorSet = false;
    this.equalsPressed = false;
    this.lastNumber = null;
};

//Prototype defines functions using JSON syntax
Calculator.prototype = {
    add: function(x, y){
        return x + y;
    },

    substract: function(x, y){
        return x - y;
    },

    multiply: function (x, y){
        return x * y;
    },

    divide: function (x, y){
        if(y==0){
            alert("Cant divided by 0")
        }
        return x / y;
    },

    setVal: function (val) {
        this.currNumberCtl.innerHTML = val;
    },

    setEquation: function(val){
        this.eqCtl.innerHTML = val;
    },

    clearNumbers: function (){
        this.lastNumber = null;
        this.equalsPressed = this.operatorSet = false;
        this.setVal('0');
        this.setEquation('');
    },
    setOperator: function(newOperator){
        if(newOperator == '='){
            this.equalsPressed = true;
            this.calculate();
            this.setEquation('');
            return;
        }

        //Handle case where = was pressed
        //followed by an operator (+, -, *, /)
        if(!this.equalsPressed) this.calculate();
        this.equalsPressed = false;
        this.operator = newOperator;
        this.operatorSet = true;
        this.lastNumber = parseFloat(this.currNumberCtl.innerHTML);
        var eqText = (this.eqCtl.innerHTML == '') ?
                    this.lastNumber + ' ' + this.operator + ' ' :
                    this.eqCtl.innerHTML + ' ' + this.operator + ' ';
        this.setEquation(eqText);
    },
    
    numberClick: function(e){
        var button = (e.target) ? e.target : e.srcElement;
        if(this.operatorSet == true || this.currNumberCtl.innerHTML == '0'){
            this.setVal('');
            this.operatorSet = false;
        }
        this.setVal(this.currNumberCtl.innerHTML + button.innerHTML);
        this.setEquation(this.eqCtl.innerHTML + button.innerHTML);
    },

    calculate: function(){
        if(!this.operator || this.laseNumber == null) return;
        var displayNumber = parseFloat(this.currNumberCtl.innerHTML),
        newVal = 0;

        switch (this.operator){
            case '+':
                newVal = this.add(this.lastNumber, displayNumber);
                break;
            case '-':
                newVal = this.substract(this.lastNumber, displayNumber);
                break;
            case '*':
                newVal = this.multiply(this.lastNumber, displayNumber);
                break;
            case '/':
                newVal = this.divide(this.lastNumber, displayNumber);
                break;
        }
        this.setVal(newVal);
        this.lastNumber = newVal;
    }
};
